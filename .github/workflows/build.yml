name: Build and Release Wheels

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  build_wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Get version from setup.py
      id: get_version
      shell: python
      run: |
        import os
        import re
        import ast

        def extract_version_from_setuppy():
            try:
                with open('setup.py', 'r') as f:
                    file_contents = f.read()
                    
                    # Try to find version in setup() call
                    version_match = re.search(r'version\s*=\s*[\'"]([^\'"]*)[\'"]', file_contents)
                    if version_match:
                        return version_match.group(1)
                    
                    # Try to parse the AST to find version assignment
                    tree = ast.parse(file_contents)
                    for node in ast.walk(tree):
                        if isinstance(node, ast.Assign):
                            for target in node.targets:
                                if isinstance(target, ast.Name) and target.id == 'version':
                                    if isinstance(node.value, ast.Str):
                                        return node.value.s
                                    elif isinstance(node.value, ast.Constant):
                                        return node.value.value
            except Exception as e:
                print(f"Error extracting version: {e}")
            
            return '0.0.0'

        version = extract_version_from_setuppy()
        print(f"Extracted version: {version}")

        # Set output for GitHub Actions
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"version={version}\n")

    - name: Build wheels
      run: |
        python -m build --wheel

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*.whl

  release:
    name: Create GitHub Release
    needs: build_wheels
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        path: dist
        pattern: wheels-*
        merge-multiple: true

    - name: List downloaded wheels
      run: ls -la dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: "Release v${{ needs.build_wheels.outputs.version }}"
        tag_name: "v${{ needs.build_wheels.outputs.version }}"
        files: dist/*.whl
        generate_release_notes: true
        draft: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}